#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
    printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

setup_gitconfig () {
    if ! [ -f git/gitconfig.symlink ]
    then
        info 'setup gitconfig'

        git_credential='cache'

        user ' - What is your github author name?'
        read -e git_authorname
        user ' - What is your github author email?'
        read -e git_authoremail

        gitversion=$(git --version | cut -c13-)i
        #broken, and I cannot see why. Dies silently
        #git=$(check_version "1.7.11" "$gitversion")
        git=1
        echo "$git"

        if [[ $git -eq '0' ]]
        then
            git_push=simple
        else
            git_push=matching
        fi

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" -e "s/GIT_PUSH/$git_push/g" git/gitconfig.symlink.example > git/gitconfig.symlink

        success 'gitconfig'
    fi
}


# return 0 if program version is equal or greater than check version
check_version () {
    local version=$1 check=$2
    local winner=$(echo -e "$version\n$check" | sed '/^$/d' | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -1)
    [[ "$winner" = "$version" ]] && return 0
    return 1
}

link_files () {
    ln -fs $1 $2
    success "linked $1 to $2"
}

link_files_check () {
    # Ugly duplication of code, but meh
    overwrite_all=false
    backup_all=false
    skip_all=false

    dest=$2
    source=$1
    if ( [ -f $dest ] || [ -d $dest ] || ( [ -L $dest ] && ! [ -f 'readlink $dest' ] ))
    then
        user "File already exists: 'basename $dest' ('basename $source') what do you want to do? [s]kip, [o]verwrite, [b]ackup?"
        read -n 1 action

        case "$action" in
            o )
                overwrite=true;;
            b )
                backup=true;;
            s )
                skip=true;;
            * )
                ;;
        esac
    fi
    if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
    then
        rm -rf $dest
        success "removed $dest"
    fi

    if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
    then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
    fi

    if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
    then
        link_files $source $dest
    else
        success "skipped $source"
    fi
}


install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if ( [ -f $dest ] || [ -d $dest ] || ( [ -L $dest ] && ! [ -f 'readlink $dest' ] ))
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: 'basename $dest' ('basename $source') what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}


init_update_submodules () {
  info 'Initializing and updating git submodules'

  git submodule update --init --recursive
}

setup_gitconfig
install_dotfiles
init_update_submodules
init_update_submodules

info 'Finishing up last symlinks'

#link_files_check $DOTFILES_ROOT/prezto $HOME/.zprezto
#link_files_check $DOTFILES_ROOT/zsh/prompt_frost_setup $HOME/.zprezto/modules/prompt/functions/prompt_frost_setup
##link_files_check $DOTFILES_ROOT/zsh/prompt_frost_setup $HOME/.zplug/repos/sorin-ionescu/prezto/modules/prompt/functions
echo ''
echo '  All installed!'
