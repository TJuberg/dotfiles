set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github

" Sensible defaults as a base
Bundle 'tpope/vim-sensible'

" Git wrapper
Bundle 'tpope/vim-fugitive'

" Motion on steroids
Bundle 'Lokaltog/vim-easymotion'

" HTML helper
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}

" Python awesomeness
Bundle 'nvie/vim-flake8'
Bundle 'python.vim'
Bundle 'python_match.vim'
Bundle 'pythoncomplete'
" Bundle 'klen/python-mode'

" Javascript awesomeness
Bundle 'elzr/vim-json'
Bundle 'groenewege/vim-less'
Bundle 'pangloss/vim-javascript'
Bundle 'briancollins/vim-jst'
Bundle 'kchmck/vim-coffee-script'

" php awesomeness
Bundle 'spf13/PIV'
Bundle 'arnaud-lb/vim-php-namespace'

Bundle 'tpope/vim-markdown'
Bundle 'Puppet-Syntax-Highlighting'

" Solarized, make life easier on your eyes
Bundle 'altercation/vim-colors-solarized'

" Nerdtree
Bundle 'scrooloose/nerdtree'

" vim-syntax-extra
Bundle 'justinmk/vim-syntax-extra'

Bundle 'scrooloose/syntastic'
Bundle 'mattn/gist-vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'godlygeek/tabular'


" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'


" Saltstack and jinja
Bundle 'saltstack/salt-vim'
Bundle 'glench/vim-jinja2-syntax'

" Misc
Bundle 'vim-airline'

" localbundle keeps causing issues
" Bundle 'Rykka/localbundle.vim'
" if isdirectory(expand('~/.vim/bundle/localbundle.vim'))
"        call localbundle#init()
" endif


" SensibleVIM
runtime! plugin/sensible.vim

" Flake8
autocmd BufWritePost *.py call Flake8()

" Nerdtree
" ctrl + n
map <C-n> :NERDTreeToggle<CR>

" Solarize
" let solarized_termtrans=1
" syntax enable
" set t_Co=256
" set background=dark
" colorscheme solarized

if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
    syntax enable
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    set background=dark
    color solarized
endif


" UTF8 or die.
set encoding=utf8

" numbered lines
set number

" Keep cursor away from edges of screen.
set so=14


" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null




" strip whitespace {
function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" }

" augroup CursorLine
"    au!
"    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"    au VimEnter,WinEnter,BufWinEnter * setlocal cursorcolumn
"    au WinLeave * setlocal nocursorline
"    au WinLeave * setlocal nocursorcolumn
"augroup END

" Mouse usage enabled in normal mode.
set mouse=n

" Set xterm2 mouse mode to allow resizing of splits with mouse inside Tmux.
set ttymouse=xterm2

" Control character highlighting.
" set list listchars=tab:⇥⇥,eol:↵

" Tab settings.
set expandtab
set shiftwidth=4
set ts=4
set smarttab
set cindent
let indent_guides_enable_on_vim_startup = 1

" Make trailing whitespace annoyingly highlighted.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Automatically leave insert mode after 'updatetime' (4s by default).
" au CursorHoldI * stopinsert

" file type detection and smart indent
filetype plugin indent on

" always show the status line as the second last line
set laststatus=2

" status line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]



" Formatting {
    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    "set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
    " Remove trailing whitespaces and ^M chars
    " To disable the stripping of whitespace, add the following to your
    autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    "autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2
    " preceding line best in a plugin but here for now.

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s
    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell setlocal nospell

" }


" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" ~/.vimrc
" Make Vim recognize xterm escape sequences for Page and Arrow
" keys combined with modifiers such as Shift, Control, and Alt.
" See http://www.reddit.com/r/vim/comments/1a29vk/_/c8tze8p
if &term =~ '^screen'
  " Page keys http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ
  execute "set t_kP=\e[5;*~"
  execute "set t_kN=\e[6;*~"
    
  " Arrow keys http://unix.stackexchange.com/a/34723
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

if &term =~ 'screen-256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif
